import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QiStablecoin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const qiStablecoinABI = [
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenPriceSourceAddress', type: 'address' }],
    name: 'changeTokenPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ethPriceSourceAddress', type: 'address' }],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', type: 'uint256' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'uint256' }],
    name: 'vaultOwner',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', type: 'uint256' },
      { name: 'to', type: 'address' },
    ],
    name: 'transferVault',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', type: 'uint256' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', type: 'uint256' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'uint256' }],
    name: 'vaultExistence',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', type: 'uint256' }],
    name: 'setDebtCeiling',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'vaultID', type: 'uint256' }],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPriceSource',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', type: 'uint256' }],
    name: 'buyRiskyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtCeiling',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', type: 'uint256' }],
    name: 'checkClosingFee',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'ethPriceSourceAddress', type: 'address' },
      { name: 'tokenPriceSourceAddress', type: 'address' },
      { name: 'minimumCollateralPercentage', type: 'uint256' },
      { name: 'name', type: 'string' },
      { name: 'symbol', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', type: 'address', indexed: true },
      { name: 'newOwner', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'creator', type: 'address', indexed: false },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'vaultID', type: 'uint256', indexed: false }],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'from', type: 'address', indexed: false },
      { name: 'to', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'amount', type: 'uint256', indexed: false },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'amount', type: 'uint256', indexed: false },
    ],
    name: 'WithdrawCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'amount', type: 'uint256', indexed: false },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'amount', type: 'uint256', indexed: false },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultID', type: 'uint256', indexed: false },
      { name: 'owner', type: 'address', indexed: false },
      { name: 'buyer', type: 'address', indexed: false },
      { name: 'amountPayed', type: 'uint256', indexed: false },
    ],
    name: 'BuyRiskyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainNativeQiStablecoin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainNativeQiStablecoinABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'depositNative',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract PriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'unwrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainQiStablecoin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainQiStablecoinABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'depositNative',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract PriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainQiStablecoinSlim
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainQiStablecoinSlimABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract IPriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minDebt', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDebt',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainQiStablecoinSlimV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainQiStablecoinSlimV2ABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cfDelta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract IPriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minDebt', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDebt',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainQiStablecoinV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainQiStablecoinV2ABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract IPriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// crosschainQiStablecoinwbtc
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crosschainQiStablecoinwbtcABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract PriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20QiStablecoincamwbtc
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20QiStablecoincamwbtcABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'meta', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_meta',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'base',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract shareOracle', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'baseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenPeg', internalType: 'uint256', type: 'uint256' }],
    name: 'setTokenPeg',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'transferToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20QiStablecoinwbtc
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20QiStablecoinwbtcABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'meta', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_meta',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'base',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract PriceSource', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [
      { name: '', internalType: 'contract ERC20Detailed', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'baseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenPeg', internalType: 'uint256', type: 'uint256' }],
    name: 'setTokenPeg',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'transferToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20Stablecoin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20StablecoinABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mimatic', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TransferVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract shareOracle', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpeningFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mimatic',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_tokenPeg', internalType: 'uint256', type: 'uint256' }],
    name: 'setTokenPeg',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'uint256', type: 'uint256' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountToken', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stableQiVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableQiVaultABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_mai', internalType: 'address', type: 'address' },
      { name: '_collateral', internalType: 'address', type: 'address' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'promoter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AddedFrontEnd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BorrowToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'riskyVault',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVault',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'riskyVaultBuyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amountPaidtoBuy',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BoughtRiskyDebtVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BurnedToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'CreateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DestroyVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'debtRepaid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateralLiquidated',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidateVault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'closingFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PayBackToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'promoter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RemovedFrontEnd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UpdatedAdmin',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedClosingFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_debtRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedDebtRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UpdatedEthPriceSource',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_adminFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_refFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'promoter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedFrontEnd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_gainRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedGainRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'interestRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedInterestRate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMaxDebt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedMaxDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMinCollateralRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedMinCollateralRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMinDebt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedMinDebt',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UpdatedOpeningFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oracle',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'UpdatedOracleName',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRef',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UpdatedRef',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pool',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UpdatedStabilityPool',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'uri', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'UpdatedTokenURI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultID',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'earned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawInterest',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_minimumCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'accumulatedVaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_promoter', internalType: 'uint256', type: 'uint256' }],
    name: 'addFrontEnd',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'adm',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'adminFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: '_front', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'borrowToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountToken', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'buyRiskDebtVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'promoFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ethPriceSourceAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'changeEthPriceSource',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCollateralPercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkCost',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkExtract',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'checkRiskyVault',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'closingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collateral',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createVault',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'debtRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimalDifferenceRaisedToTen',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'destroyVault',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceSource',
    outputs: [
      { name: '', internalType: 'contract IPriceSource', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gainRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getClosingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDebtCeiling',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEthPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'pay', internalType: 'address', type: 'address' }],
    name: 'getPaid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getPaid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokenPriceSource',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalValueLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'iR',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isValidCollateral',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'lastInterest',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: '_front', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mai',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maiDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maticDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'openingFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: '_front', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payBackToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: '_front', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'paybackTokenAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceSourceDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'promoter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ref',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'refFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_promoter', internalType: 'uint256', type: 'uint256' }],
    name: 'removeFrontEnd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_adm', internalType: 'address', type: 'address' }],
    name: 'setAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_closingFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setClosingFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_debtRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDebtRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_admin', internalType: 'uint256', type: 'uint256' },
      { name: '_ref', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gainRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setGainRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_iR', internalType: 'uint256', type: 'uint256' }],
    name: 'setInterestRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxDebt', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'minimumCollateralPercentage',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMinCollateralRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minDebt', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDebt',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_openingFee', internalType: 'uint256', type: 'uint256' }],
    name: 'setOpeningFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ref', internalType: 'address', type: 'address' }],
    name: 'setRef',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_pool', internalType: 'address', type: 'address' }],
    name: 'setStabilityPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stabilityPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenPeg',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_promoter', internalType: 'uint256', type: 'uint256' },
      { name: 'cashback', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateFrontEnd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_oracle', internalType: 'string', type: 'string' }],
    name: 'updateOracleName',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'updateVaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vaultCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'vaultID', internalType: 'uint256', type: 'uint256' }],
    name: 'vaultDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vaultID', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawInterest',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__.
 */
export function useQiStablecoinRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"name"`.
 */
export function useQiStablecoinName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useQiStablecoinTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"closingFee"`.
 */
export function useQiStablecoinClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"decimals"`.
 */
export function useQiStablecoinDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"vaultOwner"`.
 */
export function useQiStablecoinVaultOwner<
  TFunctionName extends 'vaultOwner',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'vaultOwner',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useQiStablecoinEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"treasury"`.
 */
export function useQiStablecoinTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useQiStablecoinBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"owner"`.
 */
export function useQiStablecoinOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"isOwner"`.
 */
export function useQiStablecoinIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useQiStablecoinGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"symbol"`.
 */
export function useQiStablecoinSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useQiStablecoinGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"vaultExistence"`.
 */
export function useQiStablecoinVaultExistence<
  TFunctionName extends 'vaultExistence',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'vaultExistence',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useQiStablecoinGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useQiStablecoinVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"tokenPriceSource"`.
 */
export function useQiStablecoinTokenPriceSource<
  TFunctionName extends 'tokenPriceSource',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'tokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useQiStablecoinGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useQiStablecoinVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useQiStablecoinVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"allowance"`.
 */
export function useQiStablecoinAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"debtCeiling"`.
 */
export function useQiStablecoinDebtCeiling<
  TFunctionName extends 'debtCeiling',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'debtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"checkClosingFee"`.
 */
export function useQiStablecoinCheckClosingFee<
  TFunctionName extends 'checkClosingFee',
  TSelectData = ReadContractResult<typeof qiStablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof qiStablecoinABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: qiStablecoinABI,
    functionName: 'checkClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof qiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__.
 */
export function useQiStablecoinWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof qiStablecoinABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, TFunctionName, TMode>({
    abi: qiStablecoinABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"changeTokenPriceSource"`.
 */
export function useQiStablecoinChangeTokenPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'changeTokenPriceSource'
        >['request']['abi'],
        'changeTokenPriceSource',
        TMode
      > & { functionName?: 'changeTokenPriceSource' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'changeTokenPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeTokenPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof qiStablecoinABI,
    'changeTokenPriceSource',
    TMode
  >({
    abi: qiStablecoinABI,
    functionName: 'changeTokenPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useQiStablecoinChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof qiStablecoinABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: qiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useQiStablecoinBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'borrowToken', TMode> & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'borrowToken', TMode>({
    abi: qiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function useQiStablecoinApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'approve', TMode>({
    abi: qiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useQiStablecoinTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'transferFrom', TMode>({
    abi: qiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useQiStablecoinIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'increaseAllowance', TMode>({
    abi: qiStablecoinABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useQiStablecoinSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'setClosingFee', TMode> & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'setClosingFee', TMode>({
    abi: qiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferVault"`.
 */
export function useQiStablecoinTransferVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'transferVault'
        >['request']['abi'],
        'transferVault',
        TMode
      > & { functionName?: 'transferVault' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'transferVault', TMode> & {
        abi?: never
        functionName?: 'transferVault'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'transferVault', TMode>({
    abi: qiStablecoinABI,
    functionName: 'transferVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"mint"`.
 */
export function useQiStablecoinMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'mint', TMode>({
    abi: qiStablecoinABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function useQiStablecoinCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'createVault', TMode> & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'createVault', TMode>({
    abi: qiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useQiStablecoinRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'renounceOwnership', TMode>({
    abi: qiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useQiStablecoinWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'withdrawCollateral', TMode>({
    abi: qiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useQiStablecoinPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'payBackToken', TMode> & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'payBackToken', TMode>({
    abi: qiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useQiStablecoinDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'destroyVault', TMode> & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'destroyVault', TMode>({
    abi: qiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function useQiStablecoinBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'burn', TMode>({
    abi: qiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useQiStablecoinDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'decreaseAllowance', TMode>({
    abi: qiStablecoinABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transfer"`.
 */
export function useQiStablecoinTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'transfer', TMode>({
    abi: qiStablecoinABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setDebtCeiling"`.
 */
export function useQiStablecoinSetDebtCeiling<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'setDebtCeiling'
        >['request']['abi'],
        'setDebtCeiling',
        TMode
      > & { functionName?: 'setDebtCeiling' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'setDebtCeiling',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtCeiling'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'setDebtCeiling', TMode>({
    abi: qiStablecoinABI,
    functionName: 'setDebtCeiling',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useQiStablecoinDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'depositCollateral', TMode>({
    abi: qiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"buyRiskyVault"`.
 */
export function useQiStablecoinBuyRiskyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'buyRiskyVault'
        >['request']['abi'],
        'buyRiskyVault',
        TMode
      > & { functionName?: 'buyRiskyVault' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'buyRiskyVault', TMode> & {
        abi?: never
        functionName?: 'buyRiskyVault'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'buyRiskyVault', TMode>({
    abi: qiStablecoinABI,
    functionName: 'buyRiskyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useQiStablecoinSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<typeof qiStablecoinABI, 'setTreasury', TMode> & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'setTreasury', TMode>({
    abi: qiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useQiStablecoinTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof qiStablecoinABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof qiStablecoinABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof qiStablecoinABI, 'transferOwnership', TMode>({
    abi: qiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__.
 */
export function usePrepareQiStablecoinWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"changeTokenPriceSource"`.
 */
export function usePrepareQiStablecoinChangeTokenPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof qiStablecoinABI,
      'changeTokenPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'changeTokenPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'changeTokenPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareQiStablecoinChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof qiStablecoinABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareQiStablecoinBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'borrowToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'borrowToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareQiStablecoinApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareQiStablecoinTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareQiStablecoinIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareQiStablecoinSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setClosingFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setClosingFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferVault"`.
 */
export function usePrepareQiStablecoinTransferVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transferVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'transferVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transferVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareQiStablecoinMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareQiStablecoinCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'createVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'createVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareQiStablecoinRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareQiStablecoinWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'withdrawCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareQiStablecoinPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'payBackToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'payBackToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareQiStablecoinDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'destroyVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'destroyVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareQiStablecoinBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareQiStablecoinDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareQiStablecoinTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setDebtCeiling"`.
 */
export function usePrepareQiStablecoinSetDebtCeiling(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setDebtCeiling'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'setDebtCeiling',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setDebtCeiling'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareQiStablecoinDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'depositCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"buyRiskyVault"`.
 */
export function usePrepareQiStablecoinBuyRiskyVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'buyRiskyVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'buyRiskyVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'buyRiskyVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareQiStablecoinSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setTreasury'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link qiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareQiStablecoinTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof qiStablecoinABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: qiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof qiStablecoinABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__.
 */
export function useQiStablecoinEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useQiStablecoinOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useQiStablecoinCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'CreateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useQiStablecoinDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'DestroyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useQiStablecoinTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'TransferVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useQiStablecoinDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'DepositCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'DepositCollateral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useQiStablecoinWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'WithdrawCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'WithdrawCollateral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useQiStablecoinBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'BorrowToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useQiStablecoinPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'PayBackToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"BuyRiskyVault"`.
 */
export function useQiStablecoinBuyRiskyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'BuyRiskyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'BuyRiskyVault',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'BuyRiskyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"Transfer"`.
 */
export function useQiStablecoinTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link qiStablecoinABI}__ and `eventName` set to `"Approval"`.
 */
export function useQiStablecoinApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof qiStablecoinABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: qiStablecoinABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof qiStablecoinABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__.
 */
export function useCrosschainNativeQiStablecoinRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainNativeQiStablecoinMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainNativeQiStablecoinBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainNativeQiStablecoinBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainNativeQiStablecoinCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainNativeQiStablecoinCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainNativeQiStablecoinCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainNativeQiStablecoinCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainNativeQiStablecoinClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainNativeQiStablecoinCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainNativeQiStablecoinDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainNativeQiStablecoinEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainNativeQiStablecoinExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainNativeQiStablecoinGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainNativeQiStablecoinGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainNativeQiStablecoinGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainNativeQiStablecoinGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainNativeQiStablecoinGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useCrosschainNativeQiStablecoinGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainNativeQiStablecoinGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainNativeQiStablecoinIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainNativeQiStablecoinIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainNativeQiStablecoinMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainNativeQiStablecoinMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainNativeQiStablecoinName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"openingFee"`.
 */
export function useCrosschainNativeQiStablecoinOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainNativeQiStablecoinOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainNativeQiStablecoinOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainNativeQiStablecoinPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainNativeQiStablecoinStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainNativeQiStablecoinSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainNativeQiStablecoinSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainNativeQiStablecoinTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainNativeQiStablecoinTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainNativeQiStablecoinTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainNativeQiStablecoinTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainNativeQiStablecoinTotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainNativeQiStablecoinTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainNativeQiStablecoinTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainNativeQiStablecoinUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainNativeQiStablecoinVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainNativeQiStablecoinVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainNativeQiStablecoinVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__.
 */
export function useCrosschainNativeQiStablecoinWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName,
    TMode
  >({ abi: crosschainNativeQiStablecoinABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainNativeQiStablecoinApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'approve',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainNativeQiStablecoinBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainNativeQiStablecoinBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'burn',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainNativeQiStablecoinChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainNativeQiStablecoinCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'createVault',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainNativeQiStablecoinDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"depositNative"`.
 */
export function useCrosschainNativeQiStablecoinDepositNative<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'depositNative'
        >['request']['abi'],
        'depositNative',
        TMode
      > & { functionName?: 'depositNative' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'depositNative',
        TMode
      > & {
        abi?: never
        functionName?: 'depositNative'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'depositNative',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'depositNative',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainNativeQiStablecoinDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainNativeQiStablecoinGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'getPaid',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainNativeQiStablecoinLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainNativeQiStablecoinPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainNativeQiStablecoinRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainNativeQiStablecoinSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainNativeQiStablecoinSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useCrosschainNativeQiStablecoinSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setClosingFee',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainNativeQiStablecoinSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainNativeQiStablecoinSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainNativeQiStablecoinSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useCrosschainNativeQiStablecoinSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setOpeningFee',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainNativeQiStablecoinSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainNativeQiStablecoinSetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainNativeQiStablecoinSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainNativeQiStablecoinTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainNativeQiStablecoinTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainNativeQiStablecoinWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainNativeQiStablecoinABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainNativeQiStablecoinABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainNativeQiStablecoinABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__.
 */
export function usePrepareCrosschainNativeQiStablecoinWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainNativeQiStablecoinApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainNativeQiStablecoinBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainNativeQiStablecoinBurn(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'burn'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainNativeQiStablecoinChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainNativeQiStablecoinCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainNativeQiStablecoinDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"depositNative"`.
 */
export function usePrepareCrosschainNativeQiStablecoinDepositNative(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'depositNative'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'depositNative',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'depositNative'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainNativeQiStablecoinDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainNativeQiStablecoinGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainNativeQiStablecoinLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainNativeQiStablecoinPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainNativeQiStablecoinRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setClosingFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setOpeningFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainNativeQiStablecoinSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainNativeQiStablecoinTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainNativeQiStablecoinTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainNativeQiStablecoinWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainNativeQiStablecoinABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainNativeQiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainNativeQiStablecoinABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__.
 */
export function useCrosschainNativeQiStablecoinEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainNativeQiStablecoinABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainNativeQiStablecoinApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainNativeQiStablecoinABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainNativeQiStablecoinApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainNativeQiStablecoinBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'BorrowToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainNativeQiStablecoinCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'CreateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainNativeQiStablecoinDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainNativeQiStablecoinDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'DestroyVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainNativeQiStablecoinLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainNativeQiStablecoinOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainNativeQiStablecoinPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'PayBackToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainNativeQiStablecoinTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainNativeQiStablecoinABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainNativeQiStablecoinTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'TransferVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainNativeQiStablecoinABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainNativeQiStablecoinWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainNativeQiStablecoinABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainNativeQiStablecoinABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainNativeQiStablecoinABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__.
 */
export function useCrosschainQiStablecoinRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainQiStablecoinBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainQiStablecoinBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainQiStablecoinCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainQiStablecoinCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainQiStablecoinCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainQiStablecoinClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainQiStablecoinCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainQiStablecoinDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainQiStablecoinEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainQiStablecoinExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainQiStablecoinGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainQiStablecoinGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainQiStablecoinGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainQiStablecoinGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainQiStablecoinGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useCrosschainQiStablecoinGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainQiStablecoinGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainQiStablecoinIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainQiStablecoinIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainQiStablecoinMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainQiStablecoinMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainQiStablecoinName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"openingFee"`.
 */
export function useCrosschainQiStablecoinOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainQiStablecoinOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainQiStablecoinOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainQiStablecoinPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainQiStablecoinStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainQiStablecoinSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainQiStablecoinSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainQiStablecoinTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainQiStablecoinTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainQiStablecoinTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainQiStablecoinTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainQiStablecoinTotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainQiStablecoinTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainQiStablecoinTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainQiStablecoinUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainQiStablecoinVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainQiStablecoinVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainQiStablecoinVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__.
 */
export function useCrosschainQiStablecoinWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    TFunctionName,
    TMode
  >({ abi: crosschainQiStablecoinABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainQiStablecoinApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinABI, 'approve', TMode>({
    abi: crosschainQiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainQiStablecoinBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainQiStablecoinBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinABI, 'burn', TMode>({
    abi: crosschainQiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainQiStablecoinChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainQiStablecoinCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'createVault',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainQiStablecoinDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"depositNative"`.
 */
export function useCrosschainQiStablecoinDepositNative<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'depositNative'
        >['request']['abi'],
        'depositNative',
        TMode
      > & { functionName?: 'depositNative' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'depositNative',
        TMode
      > & {
        abi?: never
        functionName?: 'depositNative'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'depositNative',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'depositNative',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainQiStablecoinDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainQiStablecoinGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinABI, 'getPaid', TMode>({
    abi: crosschainQiStablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainQiStablecoinLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainQiStablecoinPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainQiStablecoinRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainQiStablecoinSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainQiStablecoinSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useCrosschainQiStablecoinSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setClosingFee',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainQiStablecoinSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainQiStablecoinSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainQiStablecoinSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useCrosschainQiStablecoinSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setOpeningFee',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainQiStablecoinSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainQiStablecoinSetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainQiStablecoinSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainQiStablecoinTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainQiStablecoinTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainQiStablecoinWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__.
 */
export function usePrepareCrosschainQiStablecoinWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainQiStablecoinApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainQiStablecoinBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainQiStablecoinBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crosschainQiStablecoinABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainQiStablecoinChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainQiStablecoinCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"depositNative"`.
 */
export function usePrepareCrosschainQiStablecoinDepositNative(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'depositNative'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'depositNative',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'depositNative'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainQiStablecoinDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainQiStablecoinGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinABI, 'getPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainQiStablecoinLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainQiStablecoinPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainQiStablecoinSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareCrosschainQiStablecoinSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setClosingFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareCrosschainQiStablecoinSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setOpeningFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainQiStablecoinSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainQiStablecoinSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainQiStablecoinSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__.
 */
export function useCrosschainQiStablecoinEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainQiStablecoinApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainQiStablecoinApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainQiStablecoinBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'BorrowToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainQiStablecoinCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'CreateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainQiStablecoinDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainQiStablecoinDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'DestroyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainQiStablecoinLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'LiquidateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainQiStablecoinOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainQiStablecoinPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'PayBackToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainQiStablecoinTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainQiStablecoinTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainQiStablecoinWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__.
 */
export function useCrosschainQiStablecoinSlimRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinSlimMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainQiStablecoinSlimBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainQiStablecoinSlimBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinSlimCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainQiStablecoinSlimCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainQiStablecoinSlimCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainQiStablecoinSlimCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainQiStablecoinSlimClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainQiStablecoinSlimCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainQiStablecoinSlimDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainQiStablecoinSlimExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainQiStablecoinSlimGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainQiStablecoinSlimGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainQiStablecoinSlimGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainQiStablecoinSlimGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainQiStablecoinSlimIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainQiStablecoinSlimIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainQiStablecoinSlimMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainQiStablecoinSlimMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"minDebt"`.
 */
export function useCrosschainQiStablecoinSlimMinDebt<
  TFunctionName extends 'minDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'minDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainQiStablecoinSlimName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainQiStablecoinSlimOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainQiStablecoinSlimOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainQiStablecoinSlimPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainQiStablecoinSlimStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainQiStablecoinSlimSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainQiStablecoinSlimSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainQiStablecoinSlimTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainQiStablecoinSlimTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainQiStablecoinSlimTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainQiStablecoinSlimTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainQiStablecoinSlimTotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainQiStablecoinSlimTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainQiStablecoinSlimTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainQiStablecoinSlimUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainQiStablecoinSlimVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainQiStablecoinSlimVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainQiStablecoinSlimVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"version"`.
 */
export function useCrosschainQiStablecoinSlimVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__.
 */
export function useCrosschainQiStablecoinSlimWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName,
    TMode
  >({ abi: crosschainQiStablecoinSlimABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainQiStablecoinSlimApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'approve',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainQiStablecoinSlimBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainQiStablecoinSlimBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinSlimABI, 'burn', TMode>({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainQiStablecoinSlimCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'createVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainQiStablecoinSlimDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainQiStablecoinSlimDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainQiStablecoinSlimGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'getPaid',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainQiStablecoinSlimLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainQiStablecoinSlimPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainQiStablecoinSlimRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainQiStablecoinSlimSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainQiStablecoinSlimSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainQiStablecoinSlimSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainQiStablecoinSlimSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainQiStablecoinSlimSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function useCrosschainQiStablecoinSlimSetMinDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setMinDebt'
        >['request']['abi'],
        'setMinDebt',
        TMode
      > & { functionName?: 'setMinDebt' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setMinDebt',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinDebt'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setMinDebt',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setMinDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainQiStablecoinSlimSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainQiStablecoinSlimSetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainQiStablecoinSlimSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainQiStablecoinSlimTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainQiStablecoinSlimTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainQiStablecoinSlimWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__.
 */
export function usePrepareCrosschainQiStablecoinSlimWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainQiStablecoinSlimApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainQiStablecoinSlimBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainQiStablecoinSlimBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinSlimABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainQiStablecoinSlimChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinSlimDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainQiStablecoinSlimGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainQiStablecoinSlimPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinSlimRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetMinDebt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setMinDebt'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setMinDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setMinDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainQiStablecoinSlimSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinSlimTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinSlimTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinSlimWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__.
 */
export function useCrosschainQiStablecoinSlimEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainQiStablecoinSlimApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainQiStablecoinSlimApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainQiStablecoinSlimBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainQiStablecoinSlimCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainQiStablecoinSlimDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainQiStablecoinSlimDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'DestroyVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainQiStablecoinSlimLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainQiStablecoinSlimOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainQiStablecoinSlimPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'PayBackToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainQiStablecoinSlimTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinSlimABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainQiStablecoinSlimTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'TransferVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainQiStablecoinSlimWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__.
 */
export function useCrosschainQiStablecoinSlimV2Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinSlimV2MinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainQiStablecoinSlimV2BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainQiStablecoinSlimV2BaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"cfDelta"`.
 */
export function useCrosschainQiStablecoinSlimV2CfDelta<
  TFunctionName extends 'cfDelta',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'cfDelta',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinSlimV2CheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainQiStablecoinSlimV2CheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainQiStablecoinSlimV2CheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainQiStablecoinSlimV2CheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainQiStablecoinSlimV2ClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainQiStablecoinSlimV2Collateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainQiStablecoinSlimV2DebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimV2EthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainQiStablecoinSlimV2Exists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainQiStablecoinSlimV2GainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainQiStablecoinSlimV2GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainQiStablecoinSlimV2GetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainQiStablecoinSlimV2GetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimV2GetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimV2GetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainQiStablecoinSlimV2IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainQiStablecoinSlimV2IsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainQiStablecoinSlimV2Mai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainQiStablecoinSlimV2MaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"minDebt"`.
 */
export function useCrosschainQiStablecoinSlimV2MinDebt<
  TFunctionName extends 'minDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'minDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainQiStablecoinSlimV2Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainQiStablecoinSlimV2Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainQiStablecoinSlimV2OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainQiStablecoinSlimV2PriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainQiStablecoinSlimV2StabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainQiStablecoinSlimV2SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainQiStablecoinSlimV2Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainQiStablecoinSlimV2TokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainQiStablecoinSlimV2TokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainQiStablecoinSlimV2TokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainQiStablecoinSlimV2TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainQiStablecoinSlimV2TotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainQiStablecoinSlimV2TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainQiStablecoinSlimV2Treasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainQiStablecoinSlimV2Uri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainQiStablecoinSlimV2VaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainQiStablecoinSlimV2VaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainQiStablecoinSlimV2VaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"version"`.
 */
export function useCrosschainQiStablecoinSlimV2Version<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__.
 */
export function useCrosschainQiStablecoinSlimV2Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName,
    TMode
  >({ abi: crosschainQiStablecoinSlimV2ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainQiStablecoinSlimV2Approve<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'approve',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainQiStablecoinSlimV2BorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainQiStablecoinSlimV2Burn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'burn',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainQiStablecoinSlimV2ChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainQiStablecoinSlimV2CreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'createVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainQiStablecoinSlimV2DepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainQiStablecoinSlimV2DestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainQiStablecoinSlimV2GetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'getPaid',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainQiStablecoinSlimV2LiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainQiStablecoinSlimV2PayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainQiStablecoinSlimV2RenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainQiStablecoinSlimV2SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainQiStablecoinSlimV2SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainQiStablecoinSlimV2SetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainQiStablecoinSlimV2SetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainQiStablecoinSlimV2SetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function useCrosschainQiStablecoinSlimV2SetMinDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setMinDebt'
        >['request']['abi'],
        'setMinDebt',
        TMode
      > & { functionName?: 'setMinDebt' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setMinDebt',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinDebt'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setMinDebt',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setMinDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainQiStablecoinSlimV2SetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainQiStablecoinSlimV2SetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainQiStablecoinSlimV2SetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainQiStablecoinSlimV2TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainQiStablecoinSlimV2TransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainQiStablecoinSlimV2WithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinSlimV2ABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinSlimV2ABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinSlimV2ABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__.
 */
export function usePrepareCrosschainQiStablecoinSlimV2Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2Approve(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2BorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2Burn(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'burn'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2ChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2CreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2DepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2DestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2GetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2LiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2PayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetMinDebt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setMinDebt'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setMinDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setMinDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2SetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinSlimV2WithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinSlimV2ABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__.
 */
export function useCrosschainQiStablecoinSlimV2Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimV2ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainQiStablecoinSlimV2ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimV2ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainQiStablecoinSlimV2ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainQiStablecoinSlimV2BorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'BorrowToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainQiStablecoinSlimV2CreateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'CreateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainQiStablecoinSlimV2DepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainQiStablecoinSlimV2DestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'DestroyVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainQiStablecoinSlimV2LiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainQiStablecoinSlimV2OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainQiStablecoinSlimV2PayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'PayBackToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainQiStablecoinSlimV2TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinSlimV2ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainQiStablecoinSlimV2TransferVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'TransferVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinSlimV2ABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainQiStablecoinSlimV2WithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinSlimV2ABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinSlimV2ABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinSlimV2ABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__.
 */
export function useCrosschainQiStablecoinV2Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinV2MinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainQiStablecoinV2BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainQiStablecoinV2BaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinV2CheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainQiStablecoinV2CheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainQiStablecoinV2CheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainQiStablecoinV2CheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainQiStablecoinV2ClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainQiStablecoinV2Collateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainQiStablecoinV2DebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainQiStablecoinV2EthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainQiStablecoinV2Exists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainQiStablecoinV2GainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainQiStablecoinV2GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainQiStablecoinV2GetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainQiStablecoinV2GetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainQiStablecoinV2GetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainQiStablecoinV2GetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainQiStablecoinV2IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainQiStablecoinV2IsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainQiStablecoinV2Mai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainQiStablecoinV2MaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainQiStablecoinV2Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainQiStablecoinV2Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainQiStablecoinV2OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainQiStablecoinV2PriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainQiStablecoinV2StabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainQiStablecoinV2SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainQiStablecoinV2Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainQiStablecoinV2TokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainQiStablecoinV2TokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainQiStablecoinV2TokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainQiStablecoinV2TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainQiStablecoinV2TotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainQiStablecoinV2TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainQiStablecoinV2Treasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainQiStablecoinV2Uri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainQiStablecoinV2VaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainQiStablecoinV2VaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainQiStablecoinV2VaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__.
 */
export function useCrosschainQiStablecoinV2Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName,
    TMode
  >({ abi: crosschainQiStablecoinV2ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainQiStablecoinV2Approve<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinV2ABI, 'approve', TMode>(
    {
      abi: crosschainQiStablecoinV2ABI,
      functionName: 'approve',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainQiStablecoinV2BorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainQiStablecoinV2Burn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinV2ABI, 'burn', TMode>({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainQiStablecoinV2ChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainQiStablecoinV2CreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'createVault',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainQiStablecoinV2DepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainQiStablecoinV2DestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainQiStablecoinV2GetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinV2ABI, 'getPaid', TMode>(
    {
      abi: crosschainQiStablecoinV2ABI,
      functionName: 'getPaid',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainQiStablecoinV2LiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainQiStablecoinV2PayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainQiStablecoinV2RenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainQiStablecoinV2SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainQiStablecoinV2SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainQiStablecoinV2SetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainQiStablecoinV2SetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainQiStablecoinV2SetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainQiStablecoinV2SetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainQiStablecoinV2SetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainQiStablecoinV2SetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainQiStablecoinV2TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainQiStablecoinV2TransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainQiStablecoinV2WithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinV2ABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinV2ABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinV2ABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__.
 */
export function usePrepareCrosschainQiStablecoinV2Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainQiStablecoinV2Approve(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainQiStablecoinV2BorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainQiStablecoinV2Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinV2ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainQiStablecoinV2ChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainQiStablecoinV2CreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinV2DepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainQiStablecoinV2DestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainQiStablecoinV2GetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainQiStablecoinV2LiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainQiStablecoinV2PayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinV2RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinV2SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainQiStablecoinV2SetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinV2TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinV2TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinV2WithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinV2ABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinV2ABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinV2ABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__.
 */
export function useCrosschainQiStablecoinV2Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainQiStablecoinV2ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainQiStablecoinV2ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinV2ABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainQiStablecoinV2BorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainQiStablecoinV2CreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainQiStablecoinV2DepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinV2ABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainQiStablecoinV2DestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainQiStablecoinV2LiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinV2ABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainQiStablecoinV2OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinV2ABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainQiStablecoinV2PayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainQiStablecoinV2TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainQiStablecoinV2TransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinV2ABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinV2ABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainQiStablecoinV2WithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinV2ABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinV2ABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinV2ABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__.
 */
export function useCrosschainQiStablecoinwbtcRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinwbtcMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCrosschainQiStablecoinwbtcBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"baseURI"`.
 */
export function useCrosschainQiStablecoinwbtcBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useCrosschainQiStablecoinwbtcCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"checkCost"`.
 */
export function useCrosschainQiStablecoinwbtcCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useCrosschainQiStablecoinwbtcCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useCrosschainQiStablecoinwbtcCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"closingFee"`.
 */
export function useCrosschainQiStablecoinwbtcClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"collateral"`.
 */
export function useCrosschainQiStablecoinwbtcCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useCrosschainQiStablecoinwbtcDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useCrosschainQiStablecoinwbtcEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"exists"`.
 */
export function useCrosschainQiStablecoinwbtcExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useCrosschainQiStablecoinwbtcGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCrosschainQiStablecoinwbtcGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useCrosschainQiStablecoinwbtcGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useCrosschainQiStablecoinwbtcGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useCrosschainQiStablecoinwbtcGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useCrosschainQiStablecoinwbtcGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useCrosschainQiStablecoinwbtcGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCrosschainQiStablecoinwbtcIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCrosschainQiStablecoinwbtcIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"mai"`.
 */
export function useCrosschainQiStablecoinwbtcMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useCrosschainQiStablecoinwbtcMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"name"`.
 */
export function useCrosschainQiStablecoinwbtcName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"openingFee"`.
 */
export function useCrosschainQiStablecoinwbtcOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"owner"`.
 */
export function useCrosschainQiStablecoinwbtcOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCrosschainQiStablecoinwbtcOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useCrosschainQiStablecoinwbtcPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useCrosschainQiStablecoinwbtcStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCrosschainQiStablecoinwbtcSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"symbol"`.
 */
export function useCrosschainQiStablecoinwbtcSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useCrosschainQiStablecoinwbtcTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useCrosschainQiStablecoinwbtcTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useCrosschainQiStablecoinwbtcTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCrosschainQiStablecoinwbtcTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useCrosschainQiStablecoinwbtcTotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCrosschainQiStablecoinwbtcTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"treasury"`.
 */
export function useCrosschainQiStablecoinwbtcTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"uri"`.
 */
export function useCrosschainQiStablecoinwbtcUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useCrosschainQiStablecoinwbtcVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useCrosschainQiStablecoinwbtcVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useCrosschainQiStablecoinwbtcVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__.
 */
export function useCrosschainQiStablecoinwbtcWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName,
    TMode
  >({ abi: crosschainQiStablecoinwbtcABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function useCrosschainQiStablecoinwbtcApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'approve',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useCrosschainQiStablecoinwbtcBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'borrowToken',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"burn"`.
 */
export function useCrosschainQiStablecoinwbtcBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'burn',
        TMode
      > & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof crosschainQiStablecoinwbtcABI, 'burn', TMode>({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useCrosschainQiStablecoinwbtcChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function useCrosschainQiStablecoinwbtcCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'createVault',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrosschainQiStablecoinwbtcDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'depositCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useCrosschainQiStablecoinwbtcDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'destroyVault',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function useCrosschainQiStablecoinwbtcGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'getPaid',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useCrosschainQiStablecoinwbtcLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'liquidateVault',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useCrosschainQiStablecoinwbtcPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'payBackToken',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrosschainQiStablecoinwbtcRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'renounceOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCrosschainQiStablecoinwbtcSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'safeTransferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCrosschainQiStablecoinwbtcSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setApprovalForAll',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useCrosschainQiStablecoinwbtcSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setClosingFee',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useCrosschainQiStablecoinwbtcSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setDebtRatio',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useCrosschainQiStablecoinwbtcSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setGainRatio',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useCrosschainQiStablecoinwbtcSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useCrosschainQiStablecoinwbtcSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setOpeningFee',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useCrosschainQiStablecoinwbtcSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setStabilityPool',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useCrosschainQiStablecoinwbtcSetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setTokenURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setTokenURI',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useCrosschainQiStablecoinwbtcSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'setTreasury',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCrosschainQiStablecoinwbtcTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'transferFrom',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrosschainQiStablecoinwbtcTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'transferOwnership',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrosschainQiStablecoinwbtcWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof crosschainQiStablecoinwbtcABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof crosschainQiStablecoinwbtcABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof crosschainQiStablecoinwbtcABI,
    'withdrawCollateral',
    TMode
  >({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__.
 */
export function usePrepareCrosschainQiStablecoinwbtcWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crosschainQiStablecoinwbtcABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setClosingFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setOpeningFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setTokenURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setTokenURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrosschainQiStablecoinwbtcWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crosschainQiStablecoinwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__.
 */
export function useCrosschainQiStablecoinwbtcEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"Approval"`.
 */
export function useCrosschainQiStablecoinwbtcApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCrosschainQiStablecoinwbtcApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useCrosschainQiStablecoinwbtcBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useCrosschainQiStablecoinwbtcCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useCrosschainQiStablecoinwbtcDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useCrosschainQiStablecoinwbtcDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'DestroyVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useCrosschainQiStablecoinwbtcLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrosschainQiStablecoinwbtcOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useCrosschainQiStablecoinwbtcPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'PayBackToken'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCrosschainQiStablecoinwbtcTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crosschainQiStablecoinwbtcABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useCrosschainQiStablecoinwbtcTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'TransferVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crosschainQiStablecoinwbtcABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useCrosschainQiStablecoinwbtcWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof crosschainQiStablecoinwbtcABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: crosschainQiStablecoinwbtcABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof crosschainQiStablecoinwbtcABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__.
 */
export function useErc20QiStablecoincamwbtcRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"_meta"`.
 */
export function useErc20QiStablecoincamwbtcMeta<
  TFunctionName extends '_meta',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: '_meta',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useErc20QiStablecoincamwbtcMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20QiStablecoincamwbtcBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"base"`.
 */
export function useErc20QiStablecoincamwbtcBase<
  TFunctionName extends 'base',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'base',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc20QiStablecoincamwbtcBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useErc20QiStablecoincamwbtcCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"checkCost"`.
 */
export function useErc20QiStablecoincamwbtcCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useErc20QiStablecoincamwbtcCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useErc20QiStablecoincamwbtcCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"closingFee"`.
 */
export function useErc20QiStablecoincamwbtcClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"collateral"`.
 */
export function useErc20QiStablecoincamwbtcCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useErc20QiStablecoincamwbtcDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useErc20QiStablecoincamwbtcEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"exists"`.
 */
export function useErc20QiStablecoincamwbtcExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useErc20QiStablecoincamwbtcGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc20QiStablecoincamwbtcGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useErc20QiStablecoincamwbtcGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useErc20QiStablecoincamwbtcGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useErc20QiStablecoincamwbtcGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useErc20QiStablecoincamwbtcGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useErc20QiStablecoincamwbtcGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc20QiStablecoincamwbtcIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"isOwner"`.
 */
export function useErc20QiStablecoincamwbtcIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"mai"`.
 */
export function useErc20QiStablecoincamwbtcMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useErc20QiStablecoincamwbtcMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"name"`.
 */
export function useErc20QiStablecoincamwbtcName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"openingFee"`.
 */
export function useErc20QiStablecoincamwbtcOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"owner"`.
 */
export function useErc20QiStablecoincamwbtcOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc20QiStablecoincamwbtcOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useErc20QiStablecoincamwbtcStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc20QiStablecoincamwbtcSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20QiStablecoincamwbtcSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc20QiStablecoincamwbtcTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc20QiStablecoincamwbtcTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useErc20QiStablecoincamwbtcTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc20QiStablecoincamwbtcTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20QiStablecoincamwbtcTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"treasury"`.
 */
export function useErc20QiStablecoincamwbtcTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useErc20QiStablecoincamwbtcVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useErc20QiStablecoincamwbtcVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useErc20QiStablecoincamwbtcVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__.
 */
export function useErc20QiStablecoincamwbtcWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName,
    TMode
  >({ abi: erc20QiStablecoincamwbtcABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20QiStablecoincamwbtcApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20QiStablecoincamwbtcABI, 'approve', TMode>(
    {
      abi: erc20QiStablecoincamwbtcABI,
      functionName: 'approve',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useErc20QiStablecoincamwbtcBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'borrowToken',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useErc20QiStablecoincamwbtcChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function useErc20QiStablecoincamwbtcCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'createVault',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useErc20QiStablecoincamwbtcDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'depositCollateral',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useErc20QiStablecoincamwbtcDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'destroyVault',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function useErc20QiStablecoincamwbtcGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof erc20QiStablecoincamwbtcABI, 'getPaid', TMode>(
    {
      abi: erc20QiStablecoincamwbtcABI,
      functionName: 'getPaid',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useErc20QiStablecoincamwbtcLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'liquidateVault',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useErc20QiStablecoincamwbtcPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'payBackToken',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc20QiStablecoincamwbtcRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'renounceOwnership',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc20QiStablecoincamwbtcSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc20QiStablecoincamwbtcSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useErc20QiStablecoincamwbtcSetBaseUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setBaseURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setBaseURI',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useErc20QiStablecoincamwbtcSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setClosingFee',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useErc20QiStablecoincamwbtcSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setDebtRatio',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useErc20QiStablecoincamwbtcSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setGainRatio',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useErc20QiStablecoincamwbtcSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useErc20QiStablecoincamwbtcSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setOpeningFee',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useErc20QiStablecoincamwbtcSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setStabilityPool',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function useErc20QiStablecoincamwbtcSetTokenPeg<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setTokenPeg'
        >['request']['abi'],
        'setTokenPeg',
        TMode
      > & { functionName?: 'setTokenPeg' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setTokenPeg',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenPeg'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setTokenPeg',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setTokenPeg',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useErc20QiStablecoincamwbtcSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'setTreasury',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20QiStablecoincamwbtcTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'transferFrom',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc20QiStablecoincamwbtcTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'transferOwnership',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferToken"`.
 */
export function useErc20QiStablecoincamwbtcTransferToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'transferToken'
        >['request']['abi'],
        'transferToken',
        TMode
      > & { functionName?: 'transferToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'transferToken',
        TMode
      > & {
        abi?: never
        functionName?: 'transferToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'transferToken',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useErc20QiStablecoincamwbtcWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoincamwbtcABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoincamwbtcABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoincamwbtcABI,
    'withdrawCollateral',
    TMode
  >({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__.
 */
export function usePrepareErc20QiStablecoincamwbtcWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20QiStablecoincamwbtcApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareErc20QiStablecoincamwbtcBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareErc20QiStablecoincamwbtcChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareErc20QiStablecoincamwbtcCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareErc20QiStablecoincamwbtcDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareErc20QiStablecoincamwbtcDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareErc20QiStablecoincamwbtcGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'getPaid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareErc20QiStablecoincamwbtcLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareErc20QiStablecoincamwbtcPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc20QiStablecoincamwbtcRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setBaseURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setBaseURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setClosingFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setOpeningFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetTokenPeg(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setTokenPeg'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setTokenPeg',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setTokenPeg'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareErc20QiStablecoincamwbtcSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20QiStablecoincamwbtcTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc20QiStablecoincamwbtcTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"transferToken"`.
 */
export function usePrepareErc20QiStablecoincamwbtcTransferToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'transferToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'transferToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'transferToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareErc20QiStablecoincamwbtcWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoincamwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__.
 */
export function useErc20QiStablecoincamwbtcEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20QiStablecoincamwbtcApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc20QiStablecoincamwbtcApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useErc20QiStablecoincamwbtcBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'BorrowToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useErc20QiStablecoincamwbtcCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'CreateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useErc20QiStablecoincamwbtcDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useErc20QiStablecoincamwbtcDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'DestroyVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useErc20QiStablecoincamwbtcLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'LiquidateVault'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc20QiStablecoincamwbtcOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useErc20QiStablecoincamwbtcPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'PayBackToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20QiStablecoincamwbtcTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useErc20QiStablecoincamwbtcTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoincamwbtcABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'TransferVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoincamwbtcABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useErc20QiStablecoincamwbtcWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoincamwbtcABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoincamwbtcABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoincamwbtcABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__.
 */
export function useErc20QiStablecoinwbtcRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"_meta"`.
 */
export function useErc20QiStablecoinwbtcMeta<
  TFunctionName extends '_meta',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: '_meta',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useErc20QiStablecoinwbtcMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20QiStablecoinwbtcBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"base"`.
 */
export function useErc20QiStablecoinwbtcBase<
  TFunctionName extends 'base',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'base',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc20QiStablecoinwbtcBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useErc20QiStablecoinwbtcCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"checkCost"`.
 */
export function useErc20QiStablecoinwbtcCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useErc20QiStablecoinwbtcCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useErc20QiStablecoinwbtcCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"closingFee"`.
 */
export function useErc20QiStablecoinwbtcClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"collateral"`.
 */
export function useErc20QiStablecoinwbtcCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useErc20QiStablecoinwbtcDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useErc20QiStablecoinwbtcEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"exists"`.
 */
export function useErc20QiStablecoinwbtcExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useErc20QiStablecoinwbtcGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc20QiStablecoinwbtcGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useErc20QiStablecoinwbtcGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useErc20QiStablecoinwbtcGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useErc20QiStablecoinwbtcGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useErc20QiStablecoinwbtcGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useErc20QiStablecoinwbtcGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc20QiStablecoinwbtcIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"isOwner"`.
 */
export function useErc20QiStablecoinwbtcIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"mai"`.
 */
export function useErc20QiStablecoinwbtcMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useErc20QiStablecoinwbtcMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"name"`.
 */
export function useErc20QiStablecoinwbtcName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"openingFee"`.
 */
export function useErc20QiStablecoinwbtcOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"owner"`.
 */
export function useErc20QiStablecoinwbtcOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc20QiStablecoinwbtcOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useErc20QiStablecoinwbtcPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useErc20QiStablecoinwbtcStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc20QiStablecoinwbtcSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20QiStablecoinwbtcSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc20QiStablecoinwbtcTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc20QiStablecoinwbtcTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useErc20QiStablecoinwbtcTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc20QiStablecoinwbtcTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20QiStablecoinwbtcTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"treasury"`.
 */
export function useErc20QiStablecoinwbtcTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useErc20QiStablecoinwbtcVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useErc20QiStablecoinwbtcVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useErc20QiStablecoinwbtcVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__.
 */
export function useErc20QiStablecoinwbtcWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName,
    TMode
  >({ abi: erc20QiStablecoinwbtcABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20QiStablecoinwbtcApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20QiStablecoinwbtcABI, 'approve', TMode>({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useErc20QiStablecoinwbtcBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'borrowToken',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useErc20QiStablecoinwbtcChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function useErc20QiStablecoinwbtcCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'createVault',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useErc20QiStablecoinwbtcDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'depositCollateral',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useErc20QiStablecoinwbtcDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'destroyVault',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function useErc20QiStablecoinwbtcGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'getPaid',
        TMode
      > & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof erc20QiStablecoinwbtcABI, 'getPaid', TMode>({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useErc20QiStablecoinwbtcLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'liquidateVault',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useErc20QiStablecoinwbtcPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'payBackToken',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc20QiStablecoinwbtcRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'renounceOwnership',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc20QiStablecoinwbtcSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc20QiStablecoinwbtcSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useErc20QiStablecoinwbtcSetBaseUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setBaseURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof erc20QiStablecoinwbtcABI, 'setBaseURI', TMode>(
    {
      abi: erc20QiStablecoinwbtcABI,
      functionName: 'setBaseURI',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useErc20QiStablecoinwbtcSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setClosingFee',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useErc20QiStablecoinwbtcSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setDebtRatio',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useErc20QiStablecoinwbtcSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setGainRatio',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useErc20QiStablecoinwbtcSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useErc20QiStablecoinwbtcSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setOpeningFee',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useErc20QiStablecoinwbtcSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setStabilityPool',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function useErc20QiStablecoinwbtcSetTokenPeg<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setTokenPeg'
        >['request']['abi'],
        'setTokenPeg',
        TMode
      > & { functionName?: 'setTokenPeg' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setTokenPeg',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenPeg'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setTokenPeg',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setTokenPeg',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useErc20QiStablecoinwbtcSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'setTreasury',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20QiStablecoinwbtcTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'transferFrom',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc20QiStablecoinwbtcTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'transferOwnership',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferToken"`.
 */
export function useErc20QiStablecoinwbtcTransferToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'transferToken'
        >['request']['abi'],
        'transferToken',
        TMode
      > & { functionName?: 'transferToken' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'transferToken',
        TMode
      > & {
        abi?: never
        functionName?: 'transferToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'transferToken',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useErc20QiStablecoinwbtcWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20QiStablecoinwbtcABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof erc20QiStablecoinwbtcABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20QiStablecoinwbtcABI,
    'withdrawCollateral',
    TMode
  >({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__.
 */
export function usePrepareErc20QiStablecoinwbtcWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20QiStablecoinwbtcApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20QiStablecoinwbtcABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareErc20QiStablecoinwbtcBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'borrowToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'borrowToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareErc20QiStablecoinwbtcChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareErc20QiStablecoinwbtcCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'createVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'createVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareErc20QiStablecoinwbtcDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareErc20QiStablecoinwbtcDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'destroyVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'destroyVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareErc20QiStablecoinwbtcGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20QiStablecoinwbtcABI, 'getPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'getPaid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareErc20QiStablecoinwbtcLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'liquidateVault'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareErc20QiStablecoinwbtcPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'payBackToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'payBackToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc20QiStablecoinwbtcRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc20QiStablecoinwbtcSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setBaseURI'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setBaseURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setClosingFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setDebtRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setDebtRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setGainRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setGainRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setOpeningFee'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetTokenPeg(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setTokenPeg'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setTokenPeg',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setTokenPeg'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareErc20QiStablecoinwbtcSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'setTreasury'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'setTreasury'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20QiStablecoinwbtcTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc20QiStablecoinwbtcTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"transferToken"`.
 */
export function usePrepareErc20QiStablecoinwbtcTransferToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'transferToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'transferToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'transferToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareErc20QiStablecoinwbtcWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20QiStablecoinwbtcABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20QiStablecoinwbtcABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20QiStablecoinwbtcABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__.
 */
export function useErc20QiStablecoinwbtcEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20QiStablecoinwbtcApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc20QiStablecoinwbtcApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoinwbtcABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useErc20QiStablecoinwbtcBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'BorrowToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useErc20QiStablecoinwbtcCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'CreateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useErc20QiStablecoinwbtcDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoinwbtcABI,
      'DepositCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoinwbtcABI,
    'DepositCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useErc20QiStablecoinwbtcDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'DestroyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useErc20QiStablecoinwbtcLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'LiquidateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoinwbtcABI,
    'LiquidateVault'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc20QiStablecoinwbtcOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoinwbtcABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoinwbtcABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useErc20QiStablecoinwbtcPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'PayBackToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20QiStablecoinwbtcTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useErc20QiStablecoinwbtcTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<typeof erc20QiStablecoinwbtcABI, 'TransferVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20QiStablecoinwbtcABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useErc20QiStablecoinwbtcWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20QiStablecoinwbtcABI,
      'WithdrawCollateral'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20QiStablecoinwbtcABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<
    typeof erc20QiStablecoinwbtcABI,
    'WithdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__.
 */
export function useErc20StablecoinRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useErc20StablecoinMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20StablecoinBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc20StablecoinBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useErc20StablecoinCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"checkCost"`.
 */
export function useErc20StablecoinCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useErc20StablecoinCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useErc20StablecoinCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"closingFee"`.
 */
export function useErc20StablecoinClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"collateral"`.
 */
export function useErc20StablecoinCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useErc20StablecoinDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useErc20StablecoinEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"exists"`.
 */
export function useErc20StablecoinExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useErc20StablecoinGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc20StablecoinGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useErc20StablecoinGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useErc20StablecoinGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useErc20StablecoinGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getOpeningFee"`.
 */
export function useErc20StablecoinGetOpeningFee<
  TFunctionName extends 'getOpeningFee',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getOpeningFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useErc20StablecoinGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc20StablecoinIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"isOwner"`.
 */
export function useErc20StablecoinIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useErc20StablecoinMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"mimatic"`.
 */
export function useErc20StablecoinMimatic<
  TFunctionName extends 'mimatic',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'mimatic',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"name"`.
 */
export function useErc20StablecoinName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"openingFee"`.
 */
export function useErc20StablecoinOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"owner"`.
 */
export function useErc20StablecoinOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc20StablecoinOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useErc20StablecoinStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc20StablecoinSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20StablecoinSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc20StablecoinTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc20StablecoinTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useErc20StablecoinTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc20StablecoinTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20StablecoinTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"treasury"`.
 */
export function useErc20StablecoinTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useErc20StablecoinVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useErc20StablecoinVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useErc20StablecoinVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<typeof erc20StablecoinABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20StablecoinABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20StablecoinABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof erc20StablecoinABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__.
 */
export function useErc20StablecoinWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, TFunctionName, TMode>({
    abi: erc20StablecoinABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20StablecoinApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20StablecoinABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'approve', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useErc20StablecoinBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'borrowToken',
        TMode
      > & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'borrowToken', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useErc20StablecoinChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function useErc20StablecoinCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'createVault',
        TMode
      > & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'createVault', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useErc20StablecoinDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'depositCollateral',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useErc20StablecoinDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'destroyVault',
        TMode
      > & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'destroyVault', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function useErc20StablecoinGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<typeof erc20StablecoinABI, 'getPaid', TMode> & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'getPaid', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useErc20StablecoinLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'liquidateVault', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useErc20StablecoinPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'payBackToken',
        TMode
      > & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'payBackToken', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc20StablecoinRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'renounceOwnership',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc20StablecoinSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'safeTransferFrom', TMode>(
    {
      abi: erc20StablecoinABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc20StablecoinSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useErc20StablecoinSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setClosingFee', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useErc20StablecoinSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setDebtRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setDebtRatio', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useErc20StablecoinSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setGainRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setGainRatio', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useErc20StablecoinSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useErc20StablecoinSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setOpeningFee', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useErc20StablecoinSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setStabilityPool', TMode>(
    {
      abi: erc20StablecoinABI,
      functionName: 'setStabilityPool',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function useErc20StablecoinSetTokenPeg<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setTokenPeg'
        >['request']['abi'],
        'setTokenPeg',
        TMode
      > & { functionName?: 'setTokenPeg' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setTokenPeg',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenPeg'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setTokenPeg', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setTokenPeg',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useErc20StablecoinSetTreasury<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'setTreasury',
        TMode
      > & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'setTreasury', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20StablecoinTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'transferFrom', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc20StablecoinTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'transferOwnership',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferToken"`.
 */
export function useErc20StablecoinTransferToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'transferToken'
        >['request']['abi'],
        'transferToken',
        TMode
      > & { functionName?: 'transferToken' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'transferToken',
        TMode
      > & {
        abi?: never
        functionName?: 'transferToken'
      } = {} as any,
) {
  return useContractWrite<typeof erc20StablecoinABI, 'transferToken', TMode>({
    abi: erc20StablecoinABI,
    functionName: 'transferToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useErc20StablecoinWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20StablecoinABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof erc20StablecoinABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20StablecoinABI,
    'withdrawCollateral',
    TMode
  >({
    abi: erc20StablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__.
 */
export function usePrepareErc20StablecoinWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20StablecoinApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareErc20StablecoinBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'borrowToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'borrowToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareErc20StablecoinChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareErc20StablecoinCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'createVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'createVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareErc20StablecoinDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'depositCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareErc20StablecoinDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'destroyVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'destroyVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareErc20StablecoinGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'getPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'getPaid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareErc20StablecoinLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'liquidateVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'liquidateVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareErc20StablecoinPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'payBackToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'payBackToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc20StablecoinRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc20StablecoinSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc20StablecoinSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareErc20StablecoinSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setClosingFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'setClosingFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareErc20StablecoinSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setDebtRatio'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setDebtRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareErc20StablecoinSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setGainRatio'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setGainRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareErc20StablecoinSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareErc20StablecoinSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setOpeningFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'setOpeningFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareErc20StablecoinSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'setStabilityPool'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setTokenPeg"`.
 */
export function usePrepareErc20StablecoinSetTokenPeg(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setTokenPeg'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setTokenPeg',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setTokenPeg'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareErc20StablecoinSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setTreasury'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20StablecoinTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc20StablecoinTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"transferToken"`.
 */
export function usePrepareErc20StablecoinTransferToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20StablecoinABI, 'transferToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'transferToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'transferToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20StablecoinABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareErc20StablecoinWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20StablecoinABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20StablecoinABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20StablecoinABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__.
 */
export function useErc20StablecoinEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20StablecoinApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc20StablecoinApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useErc20StablecoinBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'BorrowToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useErc20StablecoinCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'CreateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useErc20StablecoinDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'DepositCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'DepositCollateral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useErc20StablecoinDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'DestroyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useErc20StablecoinLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'LiquidateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'LiquidateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc20StablecoinOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc20StablecoinABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useErc20StablecoinPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'PayBackToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20StablecoinTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"TransferVault"`.
 */
export function useErc20StablecoinTransferVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'TransferVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'TransferVault',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'TransferVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20StablecoinABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useErc20StablecoinWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20StablecoinABI, 'WithdrawCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20StablecoinABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<typeof erc20StablecoinABI, 'WithdrawCollateral'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__.
 */
export function useStableQiVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"_minimumCollateralPercentage"`.
 */
export function useStableQiVaultMinimumCollateralPercentage<
  TFunctionName extends '_minimumCollateralPercentage',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: '_minimumCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"accumulatedVaultDebt"`.
 */
export function useStableQiVaultAccumulatedVaultDebt<
  TFunctionName extends 'accumulatedVaultDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'accumulatedVaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"adm"`.
 */
export function useStableQiVaultAdm<
  TFunctionName extends 'adm',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'adm',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"adminFee"`.
 */
export function useStableQiVaultAdminFee<
  TFunctionName extends 'adminFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'adminFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStableQiVaultBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"calculateFee"`.
 */
export function useStableQiVaultCalculateFee<
  TFunctionName extends 'calculateFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'calculateFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"checkCollateralPercentage"`.
 */
export function useStableQiVaultCheckCollateralPercentage<
  TFunctionName extends 'checkCollateralPercentage',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'checkCollateralPercentage',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"checkCost"`.
 */
export function useStableQiVaultCheckCost<
  TFunctionName extends 'checkCost',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'checkCost',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"checkExtract"`.
 */
export function useStableQiVaultCheckExtract<
  TFunctionName extends 'checkExtract',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'checkExtract',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"checkLiquidation"`.
 */
export function useStableQiVaultCheckLiquidation<
  TFunctionName extends 'checkLiquidation',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'checkLiquidation',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"checkRiskyVault"`.
 */
export function useStableQiVaultCheckRiskyVault<
  TFunctionName extends 'checkRiskyVault',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'checkRiskyVault',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"closingFee"`.
 */
export function useStableQiVaultClosingFee<
  TFunctionName extends 'closingFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'closingFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"collateral"`.
 */
export function useStableQiVaultCollateral<
  TFunctionName extends 'collateral',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'collateral',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"debtRatio"`.
 */
export function useStableQiVaultDebtRatio<
  TFunctionName extends 'debtRatio',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'debtRatio',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"decimalDifferenceRaisedToTen"`.
 */
export function useStableQiVaultDecimalDifferenceRaisedToTen<
  TFunctionName extends 'decimalDifferenceRaisedToTen',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'decimalDifferenceRaisedToTen',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"ethPriceSource"`.
 */
export function useStableQiVaultEthPriceSource<
  TFunctionName extends 'ethPriceSource',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'ethPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"exists"`.
 */
export function useStableQiVaultExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"gainRatio"`.
 */
export function useStableQiVaultGainRatio<
  TFunctionName extends 'gainRatio',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'gainRatio',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getApproved"`.
 */
export function useStableQiVaultGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getClosingFee"`.
 */
export function useStableQiVaultGetClosingFee<
  TFunctionName extends 'getClosingFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getClosingFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getDebtCeiling"`.
 */
export function useStableQiVaultGetDebtCeiling<
  TFunctionName extends 'getDebtCeiling',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getDebtCeiling',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getEthPriceSource"`.
 */
export function useStableQiVaultGetEthPriceSource<
  TFunctionName extends 'getEthPriceSource',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getEthPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getTokenPriceSource"`.
 */
export function useStableQiVaultGetTokenPriceSource<
  TFunctionName extends 'getTokenPriceSource',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getTokenPriceSource',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getTotalValueLocked"`.
 */
export function useStableQiVaultGetTotalValueLocked<
  TFunctionName extends 'getTotalValueLocked',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'getTotalValueLocked',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"iR"`.
 */
export function useStableQiVaultIR<
  TFunctionName extends 'iR',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'iR',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useStableQiVaultIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"isValidCollateral"`.
 */
export function useStableQiVaultIsValidCollateral<
  TFunctionName extends 'isValidCollateral',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'isValidCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"lastInterest"`.
 */
export function useStableQiVaultLastInterest<
  TFunctionName extends 'lastInterest',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'lastInterest',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"mai"`.
 */
export function useStableQiVaultMai<
  TFunctionName extends 'mai',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'mai',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"maiDebt"`.
 */
export function useStableQiVaultMaiDebt<
  TFunctionName extends 'maiDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'maiDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"maticDebt"`.
 */
export function useStableQiVaultMaticDebt<
  TFunctionName extends 'maticDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'maticDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"maxDebt"`.
 */
export function useStableQiVaultMaxDebt<
  TFunctionName extends 'maxDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'maxDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"minDebt"`.
 */
export function useStableQiVaultMinDebt<
  TFunctionName extends 'minDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'minDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"name"`.
 */
export function useStableQiVaultName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"openingFee"`.
 */
export function useStableQiVaultOpeningFee<
  TFunctionName extends 'openingFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'openingFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"owner"`.
 */
export function useStableQiVaultOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useStableQiVaultOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"priceSourceDecimals"`.
 */
export function useStableQiVaultPriceSourceDecimals<
  TFunctionName extends 'priceSourceDecimals',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'priceSourceDecimals',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"promoter"`.
 */
export function useStableQiVaultPromoter<
  TFunctionName extends 'promoter',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'promoter',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"ref"`.
 */
export function useStableQiVaultRef<
  TFunctionName extends 'ref',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'ref',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"refFee"`.
 */
export function useStableQiVaultRefFee<
  TFunctionName extends 'refFee',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'refFee',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"stabilityPool"`.
 */
export function useStableQiVaultStabilityPool<
  TFunctionName extends 'stabilityPool',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'stabilityPool',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useStableQiVaultSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"symbol"`.
 */
export function useStableQiVaultSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useStableQiVaultTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useStableQiVaultTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"tokenPeg"`.
 */
export function useStableQiVaultTokenPeg<
  TFunctionName extends 'tokenPeg',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'tokenPeg',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useStableQiVaultTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"totalBorrowed"`.
 */
export function useStableQiVaultTotalBorrowed<
  TFunctionName extends 'totalBorrowed',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'totalBorrowed',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStableQiVaultTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"uri"`.
 */
export function useStableQiVaultUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"vaultCollateral"`.
 */
export function useStableQiVaultVaultCollateral<
  TFunctionName extends 'vaultCollateral',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'vaultCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"vaultCount"`.
 */
export function useStableQiVaultVaultCount<
  TFunctionName extends 'vaultCount',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'vaultCount',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"vaultDebt"`.
 */
export function useStableQiVaultVaultDebt<
  TFunctionName extends 'vaultDebt',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'vaultDebt',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"version"`.
 */
export function useStableQiVaultVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof stableQiVaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stableQiVaultABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stableQiVaultABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof stableQiVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__.
 */
export function useStableQiVaultWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableQiVaultABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, TFunctionName, TMode>({
    abi: stableQiVaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"addFrontEnd"`.
 */
export function useStableQiVaultAddFrontEnd<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'addFrontEnd'
        >['request']['abi'],
        'addFrontEnd',
        TMode
      > & { functionName?: 'addFrontEnd' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'addFrontEnd', TMode> & {
        abi?: never
        functionName?: 'addFrontEnd'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'addFrontEnd', TMode>({
    abi: stableQiVaultABI,
    functionName: 'addFrontEnd',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"approve"`.
 */
export function useStableQiVaultApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'approve', TMode>({
    abi: stableQiVaultABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"borrowToken"`.
 */
export function useStableQiVaultBorrowToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'borrowToken'
        >['request']['abi'],
        'borrowToken',
        TMode
      > & { functionName?: 'borrowToken' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'borrowToken', TMode> & {
        abi?: never
        functionName?: 'borrowToken'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'borrowToken', TMode>({
    abi: stableQiVaultABI,
    functionName: 'borrowToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"burn"`.
 */
export function useStableQiVaultBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'burn', TMode>({
    abi: stableQiVaultABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"buyRiskDebtVault"`.
 */
export function useStableQiVaultBuyRiskDebtVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'buyRiskDebtVault'
        >['request']['abi'],
        'buyRiskDebtVault',
        TMode
      > & { functionName?: 'buyRiskDebtVault' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'buyRiskDebtVault',
        TMode
      > & {
        abi?: never
        functionName?: 'buyRiskDebtVault'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'buyRiskDebtVault', TMode>({
    abi: stableQiVaultABI,
    functionName: 'buyRiskDebtVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function useStableQiVaultChangeEthPriceSource<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'changeEthPriceSource'
        >['request']['abi'],
        'changeEthPriceSource',
        TMode
      > & { functionName?: 'changeEthPriceSource' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'changeEthPriceSource',
        TMode
      > & {
        abi?: never
        functionName?: 'changeEthPriceSource'
      } = {} as any,
) {
  return useContractWrite<
    typeof stableQiVaultABI,
    'changeEthPriceSource',
    TMode
  >({
    abi: stableQiVaultABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"createVault"`.
 */
export function useStableQiVaultCreateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'createVault'
        >['request']['abi'],
        'createVault',
        TMode
      > & { functionName?: 'createVault' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'createVault', TMode> & {
        abi?: never
        functionName?: 'createVault'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'createVault', TMode>({
    abi: stableQiVaultABI,
    functionName: 'createVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useStableQiVaultDepositCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'depositCollateral'
        >['request']['abi'],
        'depositCollateral',
        TMode
      > & { functionName?: 'depositCollateral' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'depositCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'depositCollateral'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'depositCollateral', TMode>({
    abi: stableQiVaultABI,
    functionName: 'depositCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"destroyVault"`.
 */
export function useStableQiVaultDestroyVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'destroyVault'
        >['request']['abi'],
        'destroyVault',
        TMode
      > & { functionName?: 'destroyVault' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'destroyVault', TMode> & {
        abi?: never
        functionName?: 'destroyVault'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'destroyVault', TMode>({
    abi: stableQiVaultABI,
    functionName: 'destroyVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getPaid"`.
 */
export function useStableQiVaultGetPaid<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'getPaid'
        >['request']['abi'],
        'getPaid',
        TMode
      > & { functionName?: 'getPaid' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'getPaid', TMode> & {
        abi?: never
        functionName?: 'getPaid'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'getPaid', TMode>({
    abi: stableQiVaultABI,
    functionName: 'getPaid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function useStableQiVaultLiquidateVault<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'liquidateVault'
        >['request']['abi'],
        'liquidateVault',
        TMode
      > & { functionName?: 'liquidateVault' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'liquidateVault',
        TMode
      > & {
        abi?: never
        functionName?: 'liquidateVault'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'liquidateVault', TMode>({
    abi: stableQiVaultABI,
    functionName: 'liquidateVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"payBackToken"`.
 */
export function useStableQiVaultPayBackToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'payBackToken'
        >['request']['abi'],
        'payBackToken',
        TMode
      > & { functionName?: 'payBackToken' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'payBackToken', TMode> & {
        abi?: never
        functionName?: 'payBackToken'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'payBackToken', TMode>({
    abi: stableQiVaultABI,
    functionName: 'payBackToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"paybackTokenAll"`.
 */
export function useStableQiVaultPaybackTokenAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'paybackTokenAll'
        >['request']['abi'],
        'paybackTokenAll',
        TMode
      > & { functionName?: 'paybackTokenAll' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'paybackTokenAll',
        TMode
      > & {
        abi?: never
        functionName?: 'paybackTokenAll'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'paybackTokenAll', TMode>({
    abi: stableQiVaultABI,
    functionName: 'paybackTokenAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"removeFrontEnd"`.
 */
export function useStableQiVaultRemoveFrontEnd<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'removeFrontEnd'
        >['request']['abi'],
        'removeFrontEnd',
        TMode
      > & { functionName?: 'removeFrontEnd' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'removeFrontEnd',
        TMode
      > & {
        abi?: never
        functionName?: 'removeFrontEnd'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'removeFrontEnd', TMode>({
    abi: stableQiVaultABI,
    functionName: 'removeFrontEnd',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStableQiVaultRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'renounceOwnership', TMode>({
    abi: stableQiVaultABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useStableQiVaultSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'safeTransferFrom', TMode>({
    abi: stableQiVaultABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setAdmin"`.
 */
export function useStableQiVaultSetAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setAdmin'
        >['request']['abi'],
        'setAdmin',
        TMode
      > & { functionName?: 'setAdmin' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setAdmin', TMode> & {
        abi?: never
        functionName?: 'setAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setAdmin', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useStableQiVaultSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setApprovalForAll', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function useStableQiVaultSetClosingFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setClosingFee'
        >['request']['abi'],
        'setClosingFee',
        TMode
      > & { functionName?: 'setClosingFee' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setClosingFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setClosingFee'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setClosingFee', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setClosingFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function useStableQiVaultSetDebtRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setDebtRatio'
        >['request']['abi'],
        'setDebtRatio',
        TMode
      > & { functionName?: 'setDebtRatio' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setDebtRatio', TMode> & {
        abi?: never
        functionName?: 'setDebtRatio'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setDebtRatio', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setDebtRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setFees"`.
 */
export function useStableQiVaultSetFees<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setFees'
        >['request']['abi'],
        'setFees',
        TMode
      > & { functionName?: 'setFees' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setFees', TMode> & {
        abi?: never
        functionName?: 'setFees'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setFees', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function useStableQiVaultSetGainRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setGainRatio'
        >['request']['abi'],
        'setGainRatio',
        TMode
      > & { functionName?: 'setGainRatio' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setGainRatio', TMode> & {
        abi?: never
        functionName?: 'setGainRatio'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setGainRatio', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setGainRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setInterestRate"`.
 */
export function useStableQiVaultSetInterestRate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setInterestRate'
        >['request']['abi'],
        'setInterestRate',
        TMode
      > & { functionName?: 'setInterestRate' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setInterestRate',
        TMode
      > & {
        abi?: never
        functionName?: 'setInterestRate'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setInterestRate', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setInterestRate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMaxDebt"`.
 */
export function useStableQiVaultSetMaxDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setMaxDebt'
        >['request']['abi'],
        'setMaxDebt',
        TMode
      > & { functionName?: 'setMaxDebt' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setMaxDebt', TMode> & {
        abi?: never
        functionName?: 'setMaxDebt'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setMaxDebt', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setMaxDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function useStableQiVaultSetMinCollateralRatio<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setMinCollateralRatio'
        >['request']['abi'],
        'setMinCollateralRatio',
        TMode
      > & { functionName?: 'setMinCollateralRatio' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setMinCollateralRatio',
        TMode
      > & {
        abi?: never
        functionName?: 'setMinCollateralRatio'
      } = {} as any,
) {
  return useContractWrite<
    typeof stableQiVaultABI,
    'setMinCollateralRatio',
    TMode
  >({
    abi: stableQiVaultABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function useStableQiVaultSetMinDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setMinDebt'
        >['request']['abi'],
        'setMinDebt',
        TMode
      > & { functionName?: 'setMinDebt' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setMinDebt', TMode> & {
        abi?: never
        functionName?: 'setMinDebt'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setMinDebt', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setMinDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function useStableQiVaultSetOpeningFee<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setOpeningFee'
        >['request']['abi'],
        'setOpeningFee',
        TMode
      > & { functionName?: 'setOpeningFee' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setOpeningFee',
        TMode
      > & {
        abi?: never
        functionName?: 'setOpeningFee'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setOpeningFee', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setOpeningFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setRef"`.
 */
export function useStableQiVaultSetRef<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setRef'
        >['request']['abi'],
        'setRef',
        TMode
      > & { functionName?: 'setRef' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setRef', TMode> & {
        abi?: never
        functionName?: 'setRef'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setRef', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setRef',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function useStableQiVaultSetStabilityPool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setStabilityPool'
        >['request']['abi'],
        'setStabilityPool',
        TMode
      > & { functionName?: 'setStabilityPool' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'setStabilityPool',
        TMode
      > & {
        abi?: never
        functionName?: 'setStabilityPool'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setStabilityPool', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setStabilityPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function useStableQiVaultSetTokenUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'setTokenURI'
        >['request']['abi'],
        'setTokenURI',
        TMode
      > & { functionName?: 'setTokenURI' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'setTokenURI', TMode> & {
        abi?: never
        functionName?: 'setTokenURI'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'setTokenURI', TMode>({
    abi: stableQiVaultABI,
    functionName: 'setTokenURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStableQiVaultTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stableQiVaultABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'transferFrom', TMode>({
    abi: stableQiVaultABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStableQiVaultTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'transferOwnership', TMode>({
    abi: stableQiVaultABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateFrontEnd"`.
 */
export function useStableQiVaultUpdateFrontEnd<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'updateFrontEnd'
        >['request']['abi'],
        'updateFrontEnd',
        TMode
      > & { functionName?: 'updateFrontEnd' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'updateFrontEnd',
        TMode
      > & {
        abi?: never
        functionName?: 'updateFrontEnd'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'updateFrontEnd', TMode>({
    abi: stableQiVaultABI,
    functionName: 'updateFrontEnd',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateOracleName"`.
 */
export function useStableQiVaultUpdateOracleName<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'updateOracleName'
        >['request']['abi'],
        'updateOracleName',
        TMode
      > & { functionName?: 'updateOracleName' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'updateOracleName',
        TMode
      > & {
        abi?: never
        functionName?: 'updateOracleName'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'updateOracleName', TMode>({
    abi: stableQiVaultABI,
    functionName: 'updateOracleName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateVaultDebt"`.
 */
export function useStableQiVaultUpdateVaultDebt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'updateVaultDebt'
        >['request']['abi'],
        'updateVaultDebt',
        TMode
      > & { functionName?: 'updateVaultDebt' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'updateVaultDebt',
        TMode
      > & {
        abi?: never
        functionName?: 'updateVaultDebt'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'updateVaultDebt', TMode>({
    abi: stableQiVaultABI,
    functionName: 'updateVaultDebt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useStableQiVaultWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & { functionName?: 'withdrawCollateral' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'withdrawCollateral', TMode>(
    {
      abi: stableQiVaultABI,
      functionName: 'withdrawCollateral',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"withdrawInterest"`.
 */
export function useStableQiVaultWithdrawInterest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableQiVaultABI,
          'withdrawInterest'
        >['request']['abi'],
        'withdrawInterest',
        TMode
      > & { functionName?: 'withdrawInterest' }
    : UseContractWriteConfig<
        typeof stableQiVaultABI,
        'withdrawInterest',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawInterest'
      } = {} as any,
) {
  return useContractWrite<typeof stableQiVaultABI, 'withdrawInterest', TMode>({
    abi: stableQiVaultABI,
    functionName: 'withdrawInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__.
 */
export function usePrepareStableQiVaultWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"addFrontEnd"`.
 */
export function usePrepareStableQiVaultAddFrontEnd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'addFrontEnd'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'addFrontEnd',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'addFrontEnd'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStableQiVaultApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"borrowToken"`.
 */
export function usePrepareStableQiVaultBorrowToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'borrowToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'borrowToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'borrowToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStableQiVaultBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"buyRiskDebtVault"`.
 */
export function usePrepareStableQiVaultBuyRiskDebtVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'buyRiskDebtVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'buyRiskDebtVault',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'buyRiskDebtVault'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"changeEthPriceSource"`.
 */
export function usePrepareStableQiVaultChangeEthPriceSource(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stableQiVaultABI,
      'changeEthPriceSource'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'changeEthPriceSource',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'changeEthPriceSource'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"createVault"`.
 */
export function usePrepareStableQiVaultCreateVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'createVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'createVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'createVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareStableQiVaultDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'depositCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'depositCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'depositCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"destroyVault"`.
 */
export function usePrepareStableQiVaultDestroyVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'destroyVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'destroyVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'destroyVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"getPaid"`.
 */
export function usePrepareStableQiVaultGetPaid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'getPaid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'getPaid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'getPaid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"liquidateVault"`.
 */
export function usePrepareStableQiVaultLiquidateVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'liquidateVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'liquidateVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'liquidateVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"payBackToken"`.
 */
export function usePrepareStableQiVaultPayBackToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'payBackToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'payBackToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'payBackToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"paybackTokenAll"`.
 */
export function usePrepareStableQiVaultPaybackTokenAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'paybackTokenAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'paybackTokenAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'paybackTokenAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"removeFrontEnd"`.
 */
export function usePrepareStableQiVaultRemoveFrontEnd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'removeFrontEnd'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'removeFrontEnd',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'removeFrontEnd'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStableQiVaultRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareStableQiVaultSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setAdmin"`.
 */
export function usePrepareStableQiVaultSetAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareStableQiVaultSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setClosingFee"`.
 */
export function usePrepareStableQiVaultSetClosingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setClosingFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setClosingFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setClosingFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setDebtRatio"`.
 */
export function usePrepareStableQiVaultSetDebtRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setDebtRatio'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setDebtRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setDebtRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setFees"`.
 */
export function usePrepareStableQiVaultSetFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setGainRatio"`.
 */
export function usePrepareStableQiVaultSetGainRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setGainRatio'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setGainRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setGainRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setInterestRate"`.
 */
export function usePrepareStableQiVaultSetInterestRate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setInterestRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setInterestRate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'setInterestRate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMaxDebt"`.
 */
export function usePrepareStableQiVaultSetMaxDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setMaxDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setMaxDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setMaxDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMinCollateralRatio"`.
 */
export function usePrepareStableQiVaultSetMinCollateralRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stableQiVaultABI,
      'setMinCollateralRatio'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setMinCollateralRatio',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'setMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setMinDebt"`.
 */
export function usePrepareStableQiVaultSetMinDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setMinDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setMinDebt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setMinDebt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setOpeningFee"`.
 */
export function usePrepareStableQiVaultSetOpeningFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setOpeningFee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setOpeningFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setOpeningFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setRef"`.
 */
export function usePrepareStableQiVaultSetRef(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setRef'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setRef',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setRef'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setStabilityPool"`.
 */
export function usePrepareStableQiVaultSetStabilityPool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setStabilityPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setStabilityPool',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'setStabilityPool'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"setTokenURI"`.
 */
export function usePrepareStableQiVaultSetTokenUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setTokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'setTokenURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'setTokenURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStableQiVaultTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStableQiVaultTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateFrontEnd"`.
 */
export function usePrepareStableQiVaultUpdateFrontEnd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'updateFrontEnd'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'updateFrontEnd',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'updateFrontEnd'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateOracleName"`.
 */
export function usePrepareStableQiVaultUpdateOracleName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'updateOracleName'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'updateOracleName',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'updateOracleName'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"updateVaultDebt"`.
 */
export function usePrepareStableQiVaultUpdateVaultDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'updateVaultDebt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'updateVaultDebt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'updateVaultDebt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareStableQiVaultWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stableQiVaultABI,
      'withdrawCollateral'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableQiVaultABI}__ and `functionName` set to `"withdrawInterest"`.
 */
export function usePrepareStableQiVaultWithdrawInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableQiVaultABI, 'withdrawInterest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: stableQiVaultABI,
    functionName: 'withdrawInterest',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableQiVaultABI,
    'withdrawInterest'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__.
 */
export function useStableQiVaultEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"AddedFrontEnd"`.
 */
export function useStableQiVaultAddedFrontEndEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'AddedFrontEnd'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'AddedFrontEnd',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'AddedFrontEnd'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"Approval"`.
 */
export function useStableQiVaultApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useStableQiVaultApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"BorrowToken"`.
 */
export function useStableQiVaultBorrowTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'BorrowToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'BorrowToken',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'BorrowToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"BoughtRiskyDebtVault"`.
 */
export function useStableQiVaultBoughtRiskyDebtVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'BoughtRiskyDebtVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'BoughtRiskyDebtVault',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'BoughtRiskyDebtVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"BurnedToken"`.
 */
export function useStableQiVaultBurnedTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'BurnedToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'BurnedToken',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'BurnedToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"CreateVault"`.
 */
export function useStableQiVaultCreateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'CreateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'CreateVault',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'CreateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"DepositCollateral"`.
 */
export function useStableQiVaultDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'DepositCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'DepositCollateral',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'DepositCollateral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"DestroyVault"`.
 */
export function useStableQiVaultDestroyVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'DestroyVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'DestroyVault',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'DestroyVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"LiquidateVault"`.
 */
export function useStableQiVaultLiquidateVaultEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'LiquidateVault'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'LiquidateVault',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'LiquidateVault'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStableQiVaultOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"PayBackToken"`.
 */
export function useStableQiVaultPayBackTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'PayBackToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'PayBackToken',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'PayBackToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"RemovedFrontEnd"`.
 */
export function useStableQiVaultRemovedFrontEndEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'RemovedFrontEnd'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'RemovedFrontEnd',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'RemovedFrontEnd'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStableQiVaultTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedAdmin"`.
 */
export function useStableQiVaultUpdatedAdminEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedAdmin'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedAdmin',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedAdmin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedClosingFee"`.
 */
export function useStableQiVaultUpdatedClosingFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedClosingFee'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedClosingFee',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedClosingFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedDebtRatio"`.
 */
export function useStableQiVaultUpdatedDebtRatioEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedDebtRatio'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedDebtRatio',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedDebtRatio'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedEthPriceSource"`.
 */
export function useStableQiVaultUpdatedEthPriceSourceEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedEthPriceSource'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedEthPriceSource',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedEthPriceSource'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedFees"`.
 */
export function useStableQiVaultUpdatedFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedFees'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedFees',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedFees'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedFrontEnd"`.
 */
export function useStableQiVaultUpdatedFrontEndEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedFrontEnd'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedFrontEnd',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedFrontEnd'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedGainRatio"`.
 */
export function useStableQiVaultUpdatedGainRatioEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedGainRatio'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedGainRatio',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedGainRatio'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedInterestRate"`.
 */
export function useStableQiVaultUpdatedInterestRateEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedInterestRate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedInterestRate',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedInterestRate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedMaxDebt"`.
 */
export function useStableQiVaultUpdatedMaxDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedMaxDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedMaxDebt',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedMaxDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedMinCollateralRatio"`.
 */
export function useStableQiVaultUpdatedMinCollateralRatioEvent(
  config: Omit<
    UseContractEventConfig<
      typeof stableQiVaultABI,
      'UpdatedMinCollateralRatio'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedMinCollateralRatio',
    ...config,
  } as UseContractEventConfig<
    typeof stableQiVaultABI,
    'UpdatedMinCollateralRatio'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedMinDebt"`.
 */
export function useStableQiVaultUpdatedMinDebtEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedMinDebt'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedMinDebt',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedMinDebt'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedOpeningFee"`.
 */
export function useStableQiVaultUpdatedOpeningFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedOpeningFee'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedOpeningFee',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedOpeningFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedOracleName"`.
 */
export function useStableQiVaultUpdatedOracleNameEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedOracleName'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedOracleName',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedOracleName'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedRef"`.
 */
export function useStableQiVaultUpdatedRefEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedRef'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedRef',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedRef'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedStabilityPool"`.
 */
export function useStableQiVaultUpdatedStabilityPoolEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedStabilityPool'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedStabilityPool',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedStabilityPool'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"UpdatedTokenURI"`.
 */
export function useStableQiVaultUpdatedTokenUriEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedTokenURI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'UpdatedTokenURI',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'UpdatedTokenURI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"WithdrawCollateral"`.
 */
export function useStableQiVaultWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'WithdrawCollateral'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'WithdrawCollateral',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'WithdrawCollateral'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableQiVaultABI}__ and `eventName` set to `"WithdrawInterest"`.
 */
export function useStableQiVaultWithdrawInterestEvent(
  config: Omit<
    UseContractEventConfig<typeof stableQiVaultABI, 'WithdrawInterest'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stableQiVaultABI,
    eventName: 'WithdrawInterest',
    ...config,
  } as UseContractEventConfig<typeof stableQiVaultABI, 'WithdrawInterest'>)
}
